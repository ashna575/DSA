#question4
# Given an integer array nums, find the subarray with the largest sum, and return its sum.
# Example 1:

# Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the largest sum 6.
# Example 2:

# Input: nums = [1] Output: 1 Explanation: The subarray [1] has the largest sum 1.
# Example 3:

# Input: nums = [5,4,-1,7,8] Output: 23 Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.

  
#  Question 2  
# Given an integer array nums sorted in non-decreasing order,
# return an array of the squares of each number sorted in non-decreasing order.

# Example 1:

# Input: nums = [-4,-1,0,3,10] Output: [0,1,9,16,100] Explanation: After squaring,
# the array becomes [16,1,0,9,100]. After sorting, it becomes [0,1,9,16,100].




# Question3

# Given two integer arrays nums1 and nums2, return an array of their intersection. 
# Each element in the result must be unique and you may return the result in any order.
# Example 1:

# Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2] 




#Question4
# Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
# Note that you must do this in-place without making a copy of the array.

# Example 1:
# Input: nums = [0,1,0,3,12] Output: [1,3,12,0,0]
# Example 2:
# Input: nums = [0] Output: [0]


#Question:-
#  You are given the heads of two sorted linked lists list1 and list2.
# Merge the two lists into one sorted list and return the head of the new list. 
# Input:  list1 = [1, 2, 4], list2 = [1, 3, 4]
# Output: [1, 1, 2, 3, 4, 4]


#Question
# Given two sorted arrays nums1 and nums2 of size m and n, return the median of the two sorted arrays.  
#    Input: nums1 = [1, 3], nums2 = [2]
# Output: 2.0

# Input: nums1 = [1, 2], nums2 = [3, 4]
# Output: 2.5
 
 
#Question
# Check if a string is a palindrome after converting to lowercase and removing non-alphanumeric characters.  
# Input:  s = "A man, a plan, a canal: Panama"  
# Output: true  
# Explanation: After removing non-alphanumeric and lowercasing â†’ "amanaplanacanalpanama"


#question
# Given an array of integers, return indices of the two numbers such that they add up to a specific target.  
# Input: nums = [2, 7, 11, 15], target = 9  
# Output: [0, 1]  // Because nums[0] + nums[1] = 2 + 7 = 9


#Question
# Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.  
# Input: nums = [-2,1,-3,4,-1,2,1,-5,4]  
# Output: 6  
# Explanation: [4, -1, 2, 1] has the largest sum = 6


#aaisment II
#Question1
# Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
# If target is not found in the array, return [-1, -1].
# You must write an algorithm with O(log n) runtime complexity.

# Example 1:

# Input: nums = [5,7,7,8,8,10], target = 8 Output: [3,4]
# Example 2:

# Input: nums = [5,7,7,8,8,10], target = 6 Output: [-1,-1]

#Question2
# We are playing the Guess Game. The game is as follows:
# I pick a number from 1 to n. You have to guess which number I picked.
# Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.
# You call a pre-defined API int guess(int num), which returns three possible results:

# -1: Your guess is higher than the number I picked (i.e. num > pick).1: Your guess is lower than the number I picked (i.e. num < pick).0: your guess is equal to the number I picked (i.e. num == pick).
# Return the number that I picked.

# Example 1:
# Input: n = 10, pick = 6 Output: 6
# Example 2:
# Input: n = 1, pick = 1 Output: 1
# Example 3:
# Input: n = 2, pick = 1 Output: 1
 

# Constraints:

# 1 <= n <= 231 - 11 <= pick <= n

#Question 3
# Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

# Return the minimized largest sum of the split.

# A subarray is a contiguous part of the array
# Example 1:

# Input: nums = [7,2,5,10,8], k = 2 Output: 18

#question4
# Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

# You must write an algorithm with O(log n) runtime complexity.

 

# Example 1:

# Input: nums = [-1,0,3,5,9,12], target = 9 Output: 4 Explanation: 9 exists in nums and its index is 4



#Question5
# There is an integer array nums sorted in ascending order (with distinct values).

# Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

# Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

# You must write an algorithm with O(log n) runtime complexity.

 

# Example 1:

# Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4